apply plugin: 'java'	
apply plugin: 'eclipse'

sourceJavaDir = 'source/java'
alfrescoBaseVersion='4.2.a'
warFileName='alfresco.war'
configDir = 'config'
explodedDepsDir = 'explodedDeps'	
explodedLibsDir = "${explodedDepsDir}/lib"
explodedConfigDir = "${explodedDepsDir}/config"
assembleDir = 'build/assemble'
sourceWebDir = 'source/web'
buildDistDir = 'build/dist'
buildLibDir = 'build/libs'
configModuleDir = "config/alfresco/module/${moduleid}"
moduleProperties = 'module.properties'
fileMapping = 'file-mapping.properties'
baseName = "${groupid}-${appName}-${version}-${build}"
jarFile = "${baseName}.jar"
ampFile = "${baseName}.amp"
jarFilePath = "${buildLibDir}/${jarFile}"

warFile = "${explodedDepsDir}/${warFileName}"

buildscript {

	repositories {
		maven {
			url "https://artifacts.alfresco.com/nexus/content/groups/public/"
		}
		mavenCentral()		
	}

	dependencies {
		classpath 'com.yahoo.platform.yui:yuicompressor:2.4.6'
	    classpath 'org.alfresco:alfresco-mmt:4.2.b'
	}
}

sourceSets {
	main {
		java {
			srcDir sourceJavaDir
		}			
	}
}

repositories {
	maven {
		url "https://artifacts.alfresco.com/nexus/content/groups/public/"
	}
	mavenCentral()		
}

dependencies {

	testRuntime group: 'org.alfresco', name: 'alfresco', version: alfrescoBaseVersion, type: 'war'
	
	compile fileTree(dir: explodedLibsDir, include: '*.jar') 
	compile fileTree(dir: 'lib', include: '*.jar')
	compile 'javax.servlet:servlet-api:2.5'		
	
	runtime 'postgresql:postgresql:9.0-801.jdbc4'
	
	testCompile 'org.springframework:spring-test:2.5'  	
	
	testRuntime files(explodedConfigDir)
	testRuntime files(configDir)
}

eclipse {
	classpath {
		file {
			withXml {
			    
				Map<String, String> map = new HashMap<String, String>()
				map.put('kind', 'src')
				map.put('path', configDir)
				
				def node = it.asNode()
				node.appendNode('classpathentry', map)
			}
		}
	}
}

task fetchWarFile(type:Copy) {
	from configurations.testRuntime
	into explodedDepsDir
	include '*.war'
	rename { String filename -> warFileName }
}

// make sure that the dependancies have been unpacked before compiling the Java
compileJava.doFirst {
	explodeDeps.execute()
}
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

jar.archiveName = jarFile

task explodeDeps << {
	
	explodedDir = file(explodedDepsDir)
	explodedLibDir = file(explodedLibsDir)
	explodedConfigDir = file("${explodedDepsDir}/config")
	warFileObj = file(warFile)

	// if the WAR file still isn't there raise an error
	if (warFileObj.exists() == true) {
		
		logger.lifecycle "${warFile} was found.  Checking dependancies ..."
		
		if (explodedDir.exists() == false) {
			println(" ... creating destination dir ${explodedDir}")
			explodedDir.mkdir()
		}
		
		if (isUnpacked(explodedLibDir) == false) {
		
			println(" ... unpacking libs into ${explodedLibDir}")
			
			ant.unzip(src: warFileObj, dest: explodedLibDir) {
				ant.patternset {
					ant.include(name: 'WEB-INF/lib/*.jar')
				}
				ant.mapper(type: 'flatten')
			}
		}
		
		if (isUnpacked(explodedConfigDir) == false) {
		
			println(" ... unpacking config into ${explodedConfigDir}")
			
			ant.unzip(src: warFileObj, dest: explodedDir) {
				ant.patternset {
					ant.include(name: 'WEB-INF/classes/**/*')
				}
			}
			
			copy {
				from "${explodedDir}/WEB-INF/classes"
				into explodedConfigDir
			}
			
			// TODO understand why this doesn't delete the folder as expected
			ant.delete(includeEmptyDirs: 'true') {
				ant.fileset(dir: "${explodedDir}/WEB-INF", includes: '**/*')			
			}
		}
	}
	else {			
		logger.error "Dependant WAR file ${warFile} can not be found.  Please place it in ${warFileObj.getPath()} to continue."
		throw new TaskInstantiationException("Dependant WAR file ${warFile} can not be found.  Please place it in ${warFileObj.getPath()} or execute fetchWarFile to continue.")
	}		
}

task amp(dependsOn: 'jar') << {
	
	delete assembleDir

	copy {
		from "${configModuleDir}"
		include "${moduleProperties}"
		include "${fileMapping}"			
		into assembleDir
	}

	copy {
		from jarFilePath
		into "${assembleDir}/lib"
	}
	
	copy {
		from configDir
		exclude "**/${moduleProperties}"
		exclude "**/${fileMapping}"
		into "${assembleDir}/config"		
	}
	
	copy {
		from sourceWebDir			
		include '**/*'
		into "${assembleDir}/web"
	}
	
	tree = fileTree("${assembleDir}/web") {
		include '**/*.js'
		exclude '**/*-min.js'
	}
	
	tree.each {File file ->
			
		destinationFile = new File(file.getPath().replaceFirst('\\.js', '-min.js'))
		
		file.withReader{ reader -> 
			compressor = new com.yahoo.platform.yui.compressor.JavaScriptCompressor(reader, null)
			destinationFile.withWriter { writer ->
				compressor.compress(writer, -1, false, false, false, false)
			}
		}
	}
	
	ant.zip(destfile: "${buildDistDir}/${ampFile}", update: 'true') {
		ant.zipfileset(dir: assembleDir)
	}	
}

/** Utility function - indicates wether the provided dir is unpacked (ie exists and has some contents) */
Boolean isUnpacked(dir) {
	if (dir.exists() == true && dir.list().length > 0) {
		return true
	}
	else {
		return false
	}
}